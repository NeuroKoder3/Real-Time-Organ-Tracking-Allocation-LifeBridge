import { exec } from "child_process";
import fs from "fs";
import path from "path";
const BACKUP_DIR = path.join(__dirname, "../backups");
const DATABASE_URL = process.env.DATABASE_URL;
const MAX_BACKUPS = 7; // keep last 7 backups// Ensure backup directory existsif (!fs.existsSync(BACKUP_DIR)) {  fs.mkdirSync(BACKUP_DIR, { recursive: true });}export function runBackup() {  if (!DATABASE_URL) {    console.error("‚ùå DATABASE_URL is not set. Cannot run backup.");    return;  }  const timestamp = new Date().toISOString().replace(/[:.]/g, "-");  const backupFile = path.join(BACKUP_DIR, `backup-${timestamp}.sql`);  console.log(`üì¶ Running backup: ${backupFile}`);  exec(`pg_dump "${DATABASE_URL}" > "${backupFile}"`, (error, stdout, stderr) => {    if (error) {      console.error("‚ùå Backup failed:", error.message);      return;    }    if (stderr) {      console.error("‚ö†Ô∏è Backup warning:", stderr);    }    console.log("‚úÖ Backup completed successfully");    // Rotate old backups    rotateBackups();  });}function rotateBackups() {  const files = fs.readdirSync(BACKUP_DIR).sort();  if (files.length > MAX_BACKUPS) {    const filesToDelete = files.slice(0, files.length - MAX_BACKUPS);    for (const file of filesToDelete) {      fs.unlinkSync(path.join(BACKUP_DIR, file));      console.log(`üóëÔ∏è Deleted old backup: ${file}`);    }  }}// Run immediately if executed directlyif (require.main === module) {  runBackup();}
