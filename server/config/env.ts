// server/config/env.tsimport fs from "fs";import { join } from "path";import dotenv from "dotenv";const envPath = join(process.cwd(), ".env");// ---------------------------------------------------------// 1) Read .env as raw text (UTF-8), strip BOM, normalize// ---------------------------------------------------------let raw = "";if (fs.existsSync(envPath)) {  raw = fs.readFileSync(envPath, "utf8");  // strip BOM  if (raw.charCodeAt(0) === 0xfeff) raw = raw.slice(1);} else {  console.warn(`⚠️  .env file not found at ${envPath}`);}// ---------------------------------------------------------// 2) First: run dotenv normally (loads most keys)// ---------------------------------------------------------if (raw) {  dotenv.config({ path: envPath });  console.log(`[dotenv] Loaded .env from ${envPath}`);}// ---------------------------------------------------------// 3) Then: HARDENED manual parser to inject ANY missing keys//    - Ignores comments//    - Supports quoted values//    - Trims stray/invisible chars//    - Works around CRLF / weird whitespace / stray & ? =// ---------------------------------------------------------if (raw) {  const lines = raw.split(/\r?\n/);  for (let line of lines) {    // trim and remove leading BOM / zero-width / NBSP    line = line.replace(/^\uFEFF/, "").replace(/\u200B|\u00A0/g, "").trim();    if (!line || line.startsWith("#")) continue;    // match KEY=VALUE (KEY is A-Z,0-9,_, starting with letter/_)    const m = line.match(/^\s*([A-Za-z_][A-Za-z0-9_]*)\s*=\s*(.*)\s*$/);    if (!m) continue;    const key = m[1];    let value = m[2];    // if quoted, strip surrounding quotes only    if ((value.startsWith('"') && value.endsWith('"')) || (value.startsWith("'") && value.endsWith("'"))) {      value = value.slice(1, -1);    } else {      // if unquoted, strip trailing inline comments      const hashIdx = value.indexOf("#");      if (hashIdx !== -1) value = value.slice(0, hashIdx).trim();    }    value = value.trim();    // inject ONLY if missing or empty    if (!process.env[key] || process.env[key]?.trim() === "") {      process.env[key] = value;      // console.log(`[dotenv-fallback] Injected ${key}`);    }  }}// ---------------------------------------------------------// 4) Validation (throws if still missing)// ---------------------------------------------------------function requireEnv(key: string): string {  const v = process.env[key]?.trim();  if (!v) {    throw new Error(`❌ ${key} must be set in your .env file`);  }  return v;}export const ENV = {  DATABASE_URL: requireEnv("DATABASE_URL"),  JWT_SECRET: requireEnv("JWT_SECRET"),  REFRESH_SECRET: requireEnv("REFRESH_SECRET"),  ENCRYPTION_MASTER_KEY: requireEnv("ENCRYPTION_MASTER_KEY"),  ENCRYPTION_DETERMINISTIC_KEY: requireEnv("ENCRYPTION_DETERMINISTIC_KEY"),  ENCRYPTION_KEY_VERSION: requireEnv("ENCRYPTION_KEY_VERSION"),  PORT: process.env.PORT || "5000",};// ---------------------------------------------------------// 5) Minimal debug (safe preview)// ---------------------------------------------------------console.log(`DATABASE_URL loaded (preview): ${ENV.DATABASE_URL.slice(0, 60)}...`);
