// server/middleware/authMiddleware.tsimport type { Request, Response, NextFunction } from "express";import jwt from "jsonwebtoken";import dotenv from "dotenv";import type { UserRole } from "../shared/schema.js";dotenv.config();const JWT_SECRET = process.env.JWT_SECRET || "changeme";// Define JWT payload shape to match AuthenticatedRequestexport interface JwtPayload {  sub: string;  email?: string;  name?: string;  role?: UserRole;  iat?: number;  exp?: number;}// Extend Express Request typeexport interface AuthenticatedRequest extends Request {  user?: {    claims: JwtPayload;    role?: UserRole;    department?: string;  };}// Middleware: Verify access tokenexport function authenticateToken(  req: AuthenticatedRequest,  res: Response,  next: NextFunction) {  const authHeader = req.headers["authorization"];  const token = authHeader?.startsWith("Bearer ")    ? authHeader.split(" ")[1]    : null;  if (!token) {    return res.status(401).json({ message: "Missing or invalid token" });  }  try {    const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;    req.user = {      claims: decoded,      role: decoded.role,    };    return next();  } catch (err: any) {    if (err.name === "TokenExpiredError") {      return res.status(401).json({ message: "Token expired" });    }    return res.status(403).json({ message: "Invalid token" });  }}
